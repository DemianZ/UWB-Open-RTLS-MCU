{"ast":null,"code":"import _classCallCheck from \"/Users/igornikolaev/workspace/uwb-rtls/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/igornikolaev/workspace/uwb-rtls/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/igornikolaev/workspace/uwb-rtls/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/igornikolaev/workspace/uwb-rtls/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/igornikolaev/workspace/uwb-rtls/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/igornikolaev/workspace/uwb-rtls/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/igornikolaev/workspace/uwb-rtls/client/src/items/serial-console.js\";\nimport React from 'react';\nimport 'jquery';\nimport 'bootstrap/js/dist/button';\nimport Select from 'react-select';\nimport socketIOClient from 'socket.io-client';\nimport '../App.css';\nimport 'bootstrap/dist/css/bootstrap.css'; //const address = '192.168.1.16:3001';\n\nvar address = 'localhost:3001'; // const address = '192.168.50.220:3001';\n// const address = '192.168.50.220:3001';\n\nvar socket = socketIOClient(address, {\n  reconnect: true\n});\n\nvar SerialConsole =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SerialConsole, _React$Component);\n\n  function SerialConsole(props) {\n    var _this;\n\n    _classCallCheck(this, SerialConsole);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SerialConsole).call(this, props));\n\n    _this.componentDidMount = function () {\n      socket.on('[server]->(availablePorts)', function (data) {\n        if (data.ports.length > 0) {\n          var arr = [];\n          data.ports.forEach(function (port, index) {\n            arr.push({\n              value: index,\n              label: port.comName\n            });\n          }, _assertThisInitialized(_assertThisInitialized(_this)));\n\n          _this.setState({\n            availablePorts: arr\n          });\n        }\n      });\n      socket.on('[server]->(portsReloaded)', function () {\n        console.log(\"socket.on([server]->(portsReloaded))\");\n      });\n      socket.on('[server]->(portOpened)', function () {\n        console.log(\"socket.on([server]->(portOpened))\");\n      });\n      socket.on('[server]->(portClosed)', function () {\n        console.log(\"socket.on([server]->(portClosed))\");\n      });\n      socket.on('[server]->(availableSerialData)', function (data) {\n        // console.log(\"socket.on([server]->(availableSerialData))\");\n        // console.log(data);\n        _this.setState({\n          consoleShowData: _this.state.consoleShowData.concat(data)\n        });\n\n        _this._refConsoleTextarea.scrollTop = _this._refConsoleTextarea.scrollHeight;\n      });\n      socket.on('diconnect', function () {\n        console.log(\"Client diconnected by server\");\n      });\n    };\n\n    _this.portSelectedHandler = function (portSelected) {\n      _this.setState({\n        portSelected: portSelected\n      });\n\n      console.log(\"Option selected:\", portSelected);\n    };\n\n    _this.serialTextEnd = React.createRef();\n    _this.state = {\n      endpoint: address,\n      color: 'white',\n      consoleRows: 16,\n      availablePorts: [],\n      portSelected: [],\n      consoleShowData: \"\",\n      consoleInputData: \"\",\n      consoleSendData: \"\"\n    };\n    /* Local functions prototypes */\n\n    _this.pressedReloadPorts = _this.pressedReloadPorts.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.pressedOpenPort = _this.pressedOpenPort.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.pressedClosePort = _this.pressedClosePort.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.pressedClearConsole = _this.pressedClearConsole.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.portSelectedHandler = _this.portSelectedHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.pressedSend = _this.pressedSend.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.sendTextAdded = _this.sendTextAdded.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    /* Refs to a DOM node */\n\n    _this._refConsoleTextarea = React.createRef();\n    return _this;\n  }\n\n  _createClass(SerialConsole, [{\n    key: \"pressedReloadPorts\",\n    value: function pressedReloadPorts(event) {\n      //const socket = socketIOClient(this.state.endpoint);\n      console.log('socket.emit([app]->(pressedReloadPorts))');\n      socket.emit('[app]->(pressedReloadPorts)');\n    }\n  }, {\n    key: \"pressedOpenPort\",\n    value: function pressedOpenPort(event) {\n      //const socket = socketIOClient(this.state.endpoint);\n      socket.emit('[app]->(pressedOpenPort)', {\n        value: this.state.portSelected.value,\n        name: this.state.portSelected.label\n      });\n    }\n  }, {\n    key: \"pressedClosePort\",\n    value: function pressedClosePort(event) {\n      //const socket = socketIOClient(this.state.endpoint);\n      //console.log('socket.emit([app]->(pressedClosePort))');\n      socket.emit('[app]->(pressedClosePort)');\n    }\n  }, {\n    key: \"pressedClearConsole\",\n    value: function pressedClearConsole(event) {\n      this.setState({\n        consoleShowData: \"\"\n      });\n    }\n  }, {\n    key: \"sendTextAdded\",\n    value: function sendTextAdded(event) {\n      //console.log(event.target.value);\n      this.setState({\n        consoleSendData: event.target.value\n      });\n    }\n  }, {\n    key: \"pressedSend\",\n    value: function pressedSend(event) {\n      socket.emit('[app]->(sendData)', {\n        sent: this.state.consoleSendData\n      });\n      this.setState({\n        consoleSendData: \"\"\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      document.body.style.backgroundColor = this.state.color;\n      return React.createElement(\"div\", {\n        className: \"container-fluid mainContainer \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row navPadding\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"colSerialConfig col-md-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"divSelectPort\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(Select, {\n        placeholder: \"Select port...\",\n        isSearchable: false,\n        value: this.state.portSelected,\n        options: this.state.availablePorts,\n        onChange: this.portSelectedHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"buttonDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-block btn-outline-primary\",\n        onClick: this.pressedReloadPorts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Reload ports\"), React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-block btn-outline-success\",\n        onClick: this.pressedOpenPort,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"Open port\"), React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-block btn-outline-danger\",\n        onClick: this.pressedClosePort,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"Close port\"))), React.createElement(\"div\", {\n        className: \"colConsoleConfig col-md-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"colSerialConsole col-md-7\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"divConsoleText\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"form-control textareaConsoleText\",\n        readOnly: true,\n        value: this.state.consoleShowData,\n        rows: this.state.consoleRows,\n        ref: function ref(input) {\n          _this2._refConsoleTextarea = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"colConsoleSendButton col-md-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-block btn-outline-primary\",\n        onClick: this.pressedSend,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"Send\")), React.createElement(\"div\", {\n        className: \"colConsoleInput col-md-10\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"form-control textareaConsoleInput\",\n        value: this.state.consoleSendData,\n        rows: 1,\n        onChange: this.sendTextAdded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"colConsoleFeatures col-md-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"buttonDivFeatures\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-block btn-outline-secondary \",\n        onClick: this.pressedClearConsole,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"Clear\")))));\n    }\n  }]);\n\n  return SerialConsole;\n}(React.Component);\n\nexport default SerialConsole;","map":{"version":3,"sources":["/Users/igornikolaev/workspace/uwb-rtls/client/src/items/serial-console.js"],"names":["React","Select","socketIOClient","address","socket","reconnect","SerialConsole","props","componentDidMount","on","data","ports","length","arr","forEach","port","index","push","value","label","comName","setState","availablePorts","console","log","consoleShowData","state","concat","_refConsoleTextarea","scrollTop","scrollHeight","portSelectedHandler","portSelected","serialTextEnd","createRef","endpoint","color","consoleRows","consoleInputData","consoleSendData","pressedReloadPorts","bind","pressedOpenPort","pressedClosePort","pressedClearConsole","pressedSend","sendTextAdded","event","emit","name","target","sent","document","body","style","backgroundColor","input","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,QAAP;AACA,OAAO,0BAAP;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,OAAO,YAAP;AACA,OAAO,kCAAP,C,CAGA;;AACA,IAAMC,OAAO,GAAG,gBAAhB,C,CACA;AACA;;AAEA,IAAMC,MAAM,GAAGF,cAAc,CAACC,OAAD,EAAU;AAACE,EAAAA,SAAS,EAAE;AAAZ,CAAV,CAA7B;;IAEMC,a;;;;;AACJ,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,uFAAMA,KAAN;;AADiB,UA0DnBC,iBA1DmB,GA0DC,YAAM;AAExBJ,MAAAA,MAAM,CAACK,EAAP,CAAU,4BAAV,EAAwC,UAACC,IAAD,EAAU;AAChD,YAAIA,IAAI,CAACC,KAAL,CAAWC,MAAX,GAAoB,CAAxB,EACA;AACE,cAAIC,GAAG,GAAG,EAAV;AACAH,UAAAA,IAAI,CAACC,KAAL,CAAWG,OAAX,CAAmB,UAASC,IAAT,EAAeC,KAAf,EAAqB;AACtCH,YAAAA,GAAG,CAACI,IAAJ,CAAS;AAACC,cAAAA,KAAK,EAAEF,KAAR;AAAeG,cAAAA,KAAK,EAAEJ,IAAI,CAACK;AAA3B,aAAT;AACD,WAFD;;AAGA,gBAAKC,QAAL,CAAc;AAACC,YAAAA,cAAc,EAAET;AAAjB,WAAd;AACD;AACF,OATD;AAWAT,MAAAA,MAAM,CAACK,EAAP,CAAU,2BAAV,EAAuC,YAAM;AAC3Cc,QAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACD,OAFD;AAIApB,MAAAA,MAAM,CAACK,EAAP,CAAU,wBAAV,EAAoC,YAAM;AACxCc,QAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACD,OAFD;AAIApB,MAAAA,MAAM,CAACK,EAAP,CAAU,wBAAV,EAAoC,YAAM;AACxCc,QAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACD,OAFD;AAIApB,MAAAA,MAAM,CAACK,EAAP,CAAU,iCAAV,EAA6C,UAACC,IAAD,EAAU;AACrD;AACA;AACA,cAAKW,QAAL,CAAc;AAACI,UAAAA,eAAe,EAAE,MAAKC,KAAL,CAAWD,eAAX,CAA2BE,MAA3B,CAAkCjB,IAAlC;AAAlB,SAAd;;AACA,cAAKkB,mBAAL,CAAyBC,SAAzB,GAAqC,MAAKD,mBAAL,CAAyBE,YAA9D;AACD,OALD;AAOA1B,MAAAA,MAAM,CAACK,EAAP,CAAU,WAAV,EAAuB,YAAK;AAC1Bc,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACD,OAFD;AAID,KA9FkB;;AAAA,UAiGnBO,mBAjGmB,GAiGG,UAACC,YAAD,EAAkB;AACtC,YAAKX,QAAL,CAAc;AAAEW,QAAAA,YAAY,EAAZA;AAAF,OAAd;;AACAT,MAAAA,OAAO,CAACC,GAAR,qBAAgCQ,YAAhC;AACD,KApGkB;;AAAA,UAsGnBC,aAtGmB,GAsGHjC,KAAK,CAACkC,SAAN,EAtGG;AAEjB,UAAKR,KAAL,GAAa;AACXS,MAAAA,QAAQ,EAAEhC,OADC;AAEXiC,MAAAA,KAAK,EAAE,OAFI;AAGXC,MAAAA,WAAW,EAAE,EAHF;AAIXf,MAAAA,cAAc,EAAE,EAJL;AAKXU,MAAAA,YAAY,EAAE,EALH;AAMXP,MAAAA,eAAe,EAAG,EANP;AAOXa,MAAAA,gBAAgB,EAAG,EAPR;AAQXC,MAAAA,eAAe,EAAE;AARN,KAAb;AAUA;;AACA,UAAKC,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBC,IAAxB,uDAA1B;AACA,UAAKC,eAAL,GAAuB,MAAKA,eAAL,CAAqBD,IAArB,uDAAvB;AACA,UAAKE,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBF,IAAtB,uDAAxB;AACA,UAAKG,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBH,IAAzB,uDAA3B;AAEA,UAAKV,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBU,IAAzB,uDAA3B;AACA,UAAKI,WAAL,GAAmB,MAAKA,WAAL,CAAiBJ,IAAjB,uDAAnB;AAEA,UAAKK,aAAL,GAAqB,MAAKA,aAAL,CAAmBL,IAAnB,uDAArB;AAEA;;AACA,UAAKb,mBAAL,GAA2B5B,KAAK,CAACkC,SAAN,EAA3B;AAxBiB;AAyBlB;;;;uCAEkBa,K,EAAO;AACxB;AACAxB,MAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACApB,MAAAA,MAAM,CAAC4C,IAAP,CAAY,6BAAZ;AACD;;;oCAEeD,K,EAAO;AACrB;AACA3C,MAAAA,MAAM,CAAC4C,IAAP,CAAY,0BAAZ,EAAwC;AAAC9B,QAAAA,KAAK,EAAE,KAAKQ,KAAL,CAAWM,YAAX,CAAwBd,KAAhC;AAAuC+B,QAAAA,IAAI,EAAE,KAAKvB,KAAL,CAAWM,YAAX,CAAwBb;AAArE,OAAxC;AACD;;;qCAEgB4B,K,EAAO;AACtB;AACA;AACA3C,MAAAA,MAAM,CAAC4C,IAAP,CAAY,2BAAZ;AACD;;;wCAEmBD,K,EAAO;AACzB,WAAK1B,QAAL,CAAc;AAACI,QAAAA,eAAe,EAAE;AAAlB,OAAd;AACD;;;kCAEasB,K,EAAO;AACnB;AACA,WAAK1B,QAAL,CAAc;AAACkB,QAAAA,eAAe,EAAGQ,KAAK,CAACG,MAAN,CAAahC;AAAhC,OAAd;AACD;;;gCAEW6B,K,EAAO;AACjB3C,MAAAA,MAAM,CAAC4C,IAAP,CAAY,mBAAZ,EAAiC;AAAEG,QAAAA,IAAI,EAAE,KAAKzB,KAAL,CAAWa;AAAnB,OAAjC;AACA,WAAKlB,QAAL,CAAc;AAACkB,QAAAA,eAAe,EAAE;AAAlB,OAAd;AACD;;;6BAgDQ;AAAA;;AACPa,MAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,eAApB,GAAsC,KAAK7B,KAAL,CAAWU,KAAjD;AAEA,aACE;AAAK,QAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,WAAW,EAAG,gBAAtB;AACQ,QAAA,YAAY,EAAG,KADvB;AAEQ,QAAA,KAAK,EAAG,KAAKV,KAAL,CAAWM,YAF3B;AAGQ,QAAA,OAAO,EAAG,KAAKN,KAAL,CAAWJ,cAH7B;AAIQ,QAAA,QAAQ,EAAG,KAAKS,mBAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,EASE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,mCAAhC;AAAoE,QAAA,OAAO,EAAE,KAAKS,kBAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,mCAAhC;AAAoE,QAAA,OAAO,EAAE,KAAKE,eAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,EAGE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,kCAAhC;AAAmE,QAAA,OAAO,EAAE,KAAKC,gBAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHF,CATF,CADF,EAgBE;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhBF,EAiBE;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAU,QAAA,SAAS,EAAC,kCAApB;AACU,QAAA,QAAQ,EAAE,IADpB;AAEU,QAAA,KAAK,EAAG,KAAKjB,KAAL,CAAWD,eAF7B;AAGU,QAAA,IAAI,EAAG,KAAKC,KAAL,CAAWW,WAH5B;AAIU,QAAA,GAAG,EAAE,aAACmB,KAAD,EAAW;AAAC,UAAA,MAAI,CAAC5B,mBAAL,GAA2B4B,KAA3B;AAAiC,SAJ5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,EASE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,mCAAhC;AAAoE,QAAA,OAAO,EAAE,KAAKX,WAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,CADF,EAIE;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAU,QAAA,SAAS,EAAC,mCAApB;AACU,QAAA,KAAK,EAAG,KAAKnB,KAAL,CAAWa,eAD7B;AAEU,QAAA,IAAI,EAAG,CAFjB;AAGU,QAAA,QAAQ,EAAK,KAAKO,aAH5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAJF,CATF,CAjBF,EAuCE;AAAK,QAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,IAAI,EAAC,QAAb;AACQ,QAAA,SAAS,EAAC,sCADlB;AAEQ,QAAA,OAAO,EAAE,KAAKF,mBAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,CADF,CAvCF,CAHF,CADF;AAsDD;;;;EAlKyB5C,KAAK,CAACyD,S;;AAqKlC,eAAenD,aAAf","sourcesContent":["import React from 'react';\n\nimport 'jquery';\nimport 'bootstrap/js/dist/button';\nimport Select from 'react-select';\nimport socketIOClient from 'socket.io-client';\n\nimport '../App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\n//const address = '192.168.1.16:3001';\nconst address = 'localhost:3001';\n// const address = '192.168.50.220:3001';\n// const address = '192.168.50.220:3001';\n\nconst socket = socketIOClient(address, {reconnect: true});\n\nclass SerialConsole extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      endpoint: address, \n      color: 'white',\n      consoleRows: 16, \n      availablePorts: [],\n      portSelected: [],\n      consoleShowData : \"\",\n      consoleInputData : \"\",\n      consoleSendData: \"\",\n    };\n    /* Local functions prototypes */\n    this.pressedReloadPorts = this.pressedReloadPorts.bind(this);\n    this.pressedOpenPort = this.pressedOpenPort.bind(this);\n    this.pressedClosePort = this.pressedClosePort.bind(this);\n    this.pressedClearConsole = this.pressedClearConsole.bind(this);\n\n    this.portSelectedHandler = this.portSelectedHandler.bind(this);\n    this.pressedSend = this.pressedSend.bind(this);\n\n    this.sendTextAdded = this.sendTextAdded.bind(this);\n\n    /* Refs to a DOM node */\n    this._refConsoleTextarea = React.createRef();\n  }\n\n  pressedReloadPorts(event) {\n    //const socket = socketIOClient(this.state.endpoint);\n    console.log('socket.emit([app]->(pressedReloadPorts))');\n    socket.emit('[app]->(pressedReloadPorts)');\n  }\n\n  pressedOpenPort(event) {\n    //const socket = socketIOClient(this.state.endpoint);\n    socket.emit('[app]->(pressedOpenPort)', {value: this.state.portSelected.value, name: this.state.portSelected.label});\n  }\n\n  pressedClosePort(event) {\n    //const socket = socketIOClient(this.state.endpoint);\n    //console.log('socket.emit([app]->(pressedClosePort))');\n    socket.emit('[app]->(pressedClosePort)');\n  }\n\n  pressedClearConsole(event) {\n    this.setState({consoleShowData: \"\"});\n  }\n\n  sendTextAdded(event) {\n    //console.log(event.target.value);\n    this.setState({consoleSendData: (event.target.value)});\n  }\n\n  pressedSend(event) {\n    socket.emit('[app]->(sendData)', { sent: this.state.consoleSendData});\n    this.setState({consoleSendData: \"\"});\n  }\n  \n  componentDidMount = () => {\n    \n    socket.on('[server]->(availablePorts)', (data) => {\n      if (data.ports.length > 0)\n      {\n        let arr = [];\n        data.ports.forEach(function(port, index){\n          arr.push({value: index, label: port.comName});\n        }, this);\n        this.setState({availablePorts: arr});\n      }\n    });\n    \n    socket.on('[server]->(portsReloaded)', () => {\n      console.log(\"socket.on([server]->(portsReloaded))\");\n    });\n    \n    socket.on('[server]->(portOpened)', () => {\n      console.log(\"socket.on([server]->(portOpened))\");\n    });\n\n    socket.on('[server]->(portClosed)', () => {\n      console.log(\"socket.on([server]->(portClosed))\");\n    });\n\n    socket.on('[server]->(availableSerialData)', (data) => {\n      // console.log(\"socket.on([server]->(availableSerialData))\");\n      // console.log(data);\n      this.setState({consoleShowData: this.state.consoleShowData.concat(data)});\n      this._refConsoleTextarea.scrollTop = this._refConsoleTextarea.scrollHeight;\n    });\n\n    socket.on('diconnect', () =>{\n      console.log(\"Client diconnected by server\");\n    });\n\n  };\n\n\n  portSelectedHandler = (portSelected) => {\n    this.setState({ portSelected });\n    console.log(`Option selected:`, portSelected);\n  }\n  \n  serialTextEnd = React.createRef();\n\n  render() {\n    document.body.style.backgroundColor = this.state.color;\n    \n    return (\n      <div className=\"container-fluid mainContainer \" >\n        {/* <div className=\"row headerRow\">\n        </div> */}\n        <div className=\"row navPadding\">\n          <div className=\"colSerialConfig col-md-2\">\n            <div className=\"divSelectPort\">\n              <Select placeholder={ \"Select port...\" }\n                      isSearchable={ false }\n                      value={ this.state.portSelected }\n                      options={ this.state.availablePorts }\n                      onChange={ this.portSelectedHandler }\n              />\n            </div>\n            <div className=\"buttonDiv\">\n              <button type=\"button\" className=\"btn btn-block btn-outline-primary\" onClick={this.pressedReloadPorts}>Reload ports</button>\n              <button type=\"button\" className=\"btn btn-block btn-outline-success\" onClick={this.pressedOpenPort}>Open port</button>\n              <button type=\"button\" className=\"btn btn-block btn-outline-danger\" onClick={this.pressedClosePort}>Close port</button>\n            </div>\n          </div>\n          <div className=\"colConsoleConfig col-md-1\"></div>\n          <div className=\"colSerialConsole col-md-7\">\n            <div className=\"divConsoleText\" >\n              <textarea className=\"form-control textareaConsoleText\" \n                        readOnly={true} \n                        value={ this.state.consoleShowData }\n                        rows={ this.state.consoleRows }\n                        ref={(input) => {this._refConsoleTextarea = input}}\n              />\n            </div>\n            <div className=\"row\">\n              <div className=\"colConsoleSendButton col-md-2\">\n              <button type=\"button\" className=\"btn btn-block btn-outline-primary\" onClick={this.pressedSend}>Send</button>\n              </div>\n              <div className=\"colConsoleInput col-md-10\">\n                <textarea className=\"form-control textareaConsoleInput\"\n                          value={ this.state.consoleSendData }\n                          rows={ 1 }\n                          onChange = { this.sendTextAdded }\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"colConsoleFeatures col-md-2\">\n            <div className=\"buttonDivFeatures\">\n              <button type=\"button\" \n                      className=\"btn btn-block btn-outline-secondary \" \n                      onClick={this.pressedClearConsole}>Clear\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SerialConsole;"]},"metadata":{},"sourceType":"module"}