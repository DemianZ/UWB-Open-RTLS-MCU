/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.2-dev */

#ifndef PB_PROTO_FILES_SETTINGS_PB_H_INCLUDED
#define PB_PROTO_FILES_SETTINGS_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _Settings {
    uint32_t DeviceID;
    uint32_t DeviceIp;
    uint32_t GatewayIp;
    uint32_t ServerIp;
    uint32_t ConnectionPort;
    uint32_t NodeID;
    uint32_t NodeType;
    uint32_t RTLSMode;
} Settings;


/* Initializer values for message structs */
#define Settings_init_default                    {0, 0, 0, 0, 0, 0, 0, 0}
#define Settings_init_zero                       {0, 0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Settings_DeviceID_tag                    1
#define Settings_DeviceIp_tag                    2
#define Settings_GatewayIp_tag                   3
#define Settings_ServerIp_tag                    4
#define Settings_ConnectionPort_tag              5
#define Settings_NodeID_tag                      6
#define Settings_NodeType_tag                    7
#define Settings_RTLSMode_tag                    8

/* Struct field encoding specification for nanopb */
#define Settings_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   DeviceID,          1) \
X(a, STATIC,   SINGULAR, UINT32,   DeviceIp,          2) \
X(a, STATIC,   SINGULAR, UINT32,   GatewayIp,         3) \
X(a, STATIC,   SINGULAR, UINT32,   ServerIp,          4) \
X(a, STATIC,   SINGULAR, UINT32,   ConnectionPort,    5) \
X(a, STATIC,   SINGULAR, UINT32,   NodeID,            6) \
X(a, STATIC,   SINGULAR, UINT32,   NodeType,          7) \
X(a, STATIC,   SINGULAR, UINT32,   RTLSMode,          8)
#define Settings_CALLBACK NULL
#define Settings_DEFAULT NULL

extern const pb_msgdesc_t Settings_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Settings_fields &Settings_msg

/* Maximum encoded size of messages (where known) */
#define Settings_size                            48

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
