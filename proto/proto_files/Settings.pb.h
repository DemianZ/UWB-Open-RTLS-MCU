/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.2-dev */

#ifndef PB_PROTO_PROTO_FILES_SETTINGS_PB_H_INCLUDED
#define PB_PROTO_PROTO_FILES_SETTINGS_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Settings_node_type {
    Settings_node_type_TYPE_NONE = 0,
    Settings_node_type_TYPE_UNDEF = 1,
    Settings_node_type_TYPE_ANCHOR = 2,
    Settings_node_type_TYPE_SYNC_NODE = 3,
    Settings_node_type_TYPE_TAG = 4
} Settings_node_type;

typedef enum _Settings_rtls_mode {
    Settings_rtls_mode_MODE_NONE = 0,
    Settings_rtls_mode_MODE_OFF = 1,
    Settings_rtls_mode_MODE_TWR = 2,
    Settings_rtls_mode_MODE_TDOA = 3
} Settings_rtls_mode;

/* Struct definitions */
typedef struct _Settings {
    uint32_t DeviceID;
    uint32_t DeviceIp;
    uint32_t SubnetMask;
    uint32_t GatewayIp;
    uint32_t ServerIp;
    uint32_t ConnectionPort;
    uint32_t NodeID;
    Settings_node_type NodeType;
    Settings_rtls_mode RTLSMode;
    float PositionX;
    float PositionY;
    float PositionZ;
} Settings;


/* Helper constants for enums */
#define _Settings_node_type_MIN Settings_node_type_TYPE_NONE
#define _Settings_node_type_MAX Settings_node_type_TYPE_TAG
#define _Settings_node_type_ARRAYSIZE ((Settings_node_type)(Settings_node_type_TYPE_TAG+1))

#define _Settings_rtls_mode_MIN Settings_rtls_mode_MODE_NONE
#define _Settings_rtls_mode_MAX Settings_rtls_mode_MODE_TDOA
#define _Settings_rtls_mode_ARRAYSIZE ((Settings_rtls_mode)(Settings_rtls_mode_MODE_TDOA+1))


/* Initializer values for message structs */
#define Settings_init_default                    {0, 0, 0, 0, 0, 0, 0, _Settings_node_type_MIN, _Settings_rtls_mode_MIN, 0, 0, 0}
#define Settings_init_zero                       {0, 0, 0, 0, 0, 0, 0, _Settings_node_type_MIN, _Settings_rtls_mode_MIN, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Settings_DeviceID_tag                    1
#define Settings_DeviceIp_tag                    2
#define Settings_SubnetMask_tag                  3
#define Settings_GatewayIp_tag                   4
#define Settings_ServerIp_tag                    5
#define Settings_ConnectionPort_tag              6
#define Settings_NodeID_tag                      7
#define Settings_NodeType_tag                    8
#define Settings_RTLSMode_tag                    9
#define Settings_PositionX_tag                   10
#define Settings_PositionY_tag                   11
#define Settings_PositionZ_tag                   12

/* Struct field encoding specification for nanopb */
#define Settings_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   DeviceID,          1) \
X(a, STATIC,   SINGULAR, UINT32,   DeviceIp,          2) \
X(a, STATIC,   SINGULAR, UINT32,   SubnetMask,        3) \
X(a, STATIC,   SINGULAR, UINT32,   GatewayIp,         4) \
X(a, STATIC,   SINGULAR, UINT32,   ServerIp,          5) \
X(a, STATIC,   SINGULAR, UINT32,   ConnectionPort,    6) \
X(a, STATIC,   SINGULAR, UINT32,   NodeID,            7) \
X(a, STATIC,   SINGULAR, UENUM,    NodeType,          8) \
X(a, STATIC,   SINGULAR, UENUM,    RTLSMode,          9) \
X(a, STATIC,   SINGULAR, FLOAT,    PositionX,        10) \
X(a, STATIC,   SINGULAR, FLOAT,    PositionY,        11) \
X(a, STATIC,   SINGULAR, FLOAT,    PositionZ,        12)
#define Settings_CALLBACK NULL
#define Settings_DEFAULT NULL

extern const pb_msgdesc_t Settings_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Settings_fields &Settings_msg

/* Maximum encoded size of messages (where known) */
#define Settings_size                            61

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
